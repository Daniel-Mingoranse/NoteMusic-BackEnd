const Quiz = require('../models/Quiz');
const User = require('../models/User');
const Module = require('../models/Module');

// @desc    Obter quiz p√∫blico (para teste)
// @route   GET /api/quiz/:moduleId
// @access  Public
exports.getQuiz = async (req, res, next) => {
  try {
    const { moduleId } = req.params;

    // Quiz mock para teste
    const mockQuiz = {
      id: moduleId,
      title: 'Quiz de Teste',
      description: 'Quiz para testar o sistema',
      category: 'test',
      questions: [
        {
          questionText: 'Qual √© a nota musical mais alta?',
          options: [
            { optionText: 'D√≥', isCorrect: false },
            { optionText: 'R√©', isCorrect: false },
            { optionText: 'Mi', isCorrect: false },
            { optionText: 'Si', isCorrect: true }
          ],
          explanation: 'Si √© a nota mais alta na escala musical b√°sica.'
        },
        {
          questionText: 'Quantas notas tem uma escala maior?',
          options: [
            { optionText: '5 notas', isCorrect: false },
            { optionText: '6 notas', isCorrect: false },
            { optionText: '7 notas', isCorrect: true },
            { optionText: '8 notas', isCorrect: false }
          ],
          explanation: 'Uma escala maior tem 7 notas: D√≥, R√©, Mi, F√°, Sol, L√°, Si.'
        },
        {
          questionText: 'O que significa "forte" em m√∫sica?',
          options: [
            { optionText: 'Volume alto', isCorrect: true },
            { optionText: 'Volume baixo', isCorrect: false },
            { optionText: 'Velocidade r√°pida', isCorrect: false },
            { optionText: 'Velocidade lenta', isCorrect: false }
          ],
          explanation: '"Forte" (f) indica que a m√∫sica deve ser tocada com volume alto.'
        }
      ],
      level: 'iniciante',
      type: 'test'
    };

    res.json({
      success: true,
      ...mockQuiz
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Obter quiz de um m√≥dulo
// @route   GET /api/quiz/:moduleId/private
// @access  Private
exports.getQuizByModule = async (req, res, next) => {
  try {
    const { moduleId } = req.params;

    // Verificar se m√≥dulo existe
    const module = await Module.findById(moduleId);
    if (!module) {
      return res.status(404).json({
        success: false,
        message: 'M√≥dulo n√£o encontrado'
      });
    }

    // Buscar quiz do m√≥dulo
    const quiz = await Quiz.findOne({ moduleId, isActive: true })
      .select('-questions.options.isCorrect -questions.options.explanation'); // Manter estrutura mas ocultar respostas corretas

    if (!quiz) {
      return res.status(404).json({
        success: false,
        message: 'Este m√≥dulo n√£o possui quiz dispon√≠vel'
      });
    }

    // Verificar tentativas do usu√°rio
    const user = await User.findById(req.user.id);
    const previousAttempts = user.completedQuizzes.filter(
      cq => cq.quizId.toString() === quiz._id.toString()
    );

    const attemptsRemaining = quiz.attempts - previousAttempts.length;

    if (attemptsRemaining <= 0) {
      return res.status(403).json({
        success: false,
        message: 'Voc√™ j√° utilizou todas as tentativas para este quiz',
        previousAttempts: previousAttempts.map(attempt => ({
          score: attempt.score,
          completedAt: attempt.completedAt
        }))
      });
    }

    // Manter a ordem original de quest√µes e op√ß√µes para alinhar com a corre√ß√£o por √≠ndice
    const shuffledQuestions = quiz.questions.map(q => ({
      _id: q._id,
      question: q.question,
      options: q.options.map(opt => ({
        id: opt.id,
        label: opt.label,
        // isCorrect e explanation ser√£o adicionados apenas na valida√ß√£o individual
      })),
      category: q.category,
      difficulty: q.difficulty,
      points: q.points,
      explanation: q.explanation
    }));

    res.json({
      success: true,
      quiz: {
        _id: quiz._id,
        title: quiz.title,
        description: quiz.description,
        timeLimit: quiz.timeLimit,
        questions: shuffledQuestions,
        totalQuestions: shuffledQuestions.length,
        totalPoints: quiz.calculateTotalPoints(),
        attemptsRemaining,
        previousAttempts: previousAttempts.map(attempt => ({
          score: attempt.score,
          completedAt: attempt.completedAt
        }))
      }
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Validar resposta de quest√£o individual
// @route   POST /api/quiz/:quizId/validate-question
// @access  Private
exports.validateQuestion = async (req, res, next) => {
  try {
    const { quizId } = req.params;
    const { questionIndex, selectedAnswer } = req.body;

    // Validar entrada
    if (typeof questionIndex !== 'number' || typeof selectedAnswer !== 'number') {
      return res.status(400).json({
        success: false,
        message: 'Dados inv√°lidos'
      });
    }

    // Verificar se √© quiz mock do desafio di√°rio
    if (quizId === 'daily-challenge-mock') {
      console.log(`üß™ Validando quest√£o ${questionIndex} do quiz mock`);
      
      // Respostas corretas para o quiz mock
      const mockQuestions = [
        {
          question: 'Quantas notas musicais existem no sistema ocidental?',
          options: [
            { id: 'A', label: '5 notas', isCorrect: false },
            { id: 'B', label: '7 notas', isCorrect: false },
            { id: 'C', label: '12 notas', isCorrect: true },
            { id: 'D', label: '10 notas', isCorrect: false }
          ],
          explanation: 'No sistema musical ocidental, temos 12 semitons: D√≥, D√≥#, R√©, R√©#, Mi, F√°, F√°#, Sol, Sol#, L√°, L√°#, Si.',
          points: 10
        },
        {
          question: 'Qual √© a nota que fica entre F√° e L√°?',
          options: [
            { id: 'A', label: 'Mi', isCorrect: false },
            { id: 'B', label: 'Sol', isCorrect: true },
            { id: 'C', label: 'Si', isCorrect: false },
            { id: 'D', label: 'R√©', isCorrect: false }
          ],
          explanation: 'A sequ√™ncia das notas √©: D√≥, R√©, Mi, F√°, Sol, L√°, Si. Portanto, Sol fica entre F√° e L√°.',
          points: 10
        }
      ];

      // Verificar se a quest√£o existe no mock
      if (questionIndex < 0 || questionIndex >= mockQuestions.length) {
        return res.status(400).json({
          success: false,
          message: '√çndice de quest√£o inv√°lido'
        });
      }

      const question = mockQuestions[questionIndex];
      
      // Verificar se a op√ß√£o existe
      if (selectedAnswer < 0 || selectedAnswer >= question.options.length) {
        return res.status(400).json({
          success: false,
          message: 'Op√ß√£o inv√°lida'
        });
      }

      // Verificar se a resposta est√° correta
      const correctOptionIndex = question.options.findIndex(opt => opt.isCorrect === true);
      const isCorrect = selectedAnswer === correctOptionIndex;
      const selectedOption = question.options[selectedAnswer];
      const correctOption = question.options[correctOptionIndex];

      console.log(`${isCorrect ? '‚úÖ' : '‚ùå'} Quest√£o ${questionIndex}: ${isCorrect ? 'Correta' : 'Incorreta'}`);

      return res.json({
        success: true,
        isCorrect,
        selectedAnswer: {
          index: selectedAnswer,
          text: selectedOption.label,
          isCorrect
        },
        correctAnswer: {
          index: correctOptionIndex,
          text: correctOption.label
        },
        explanation: question.explanation,
        points: isCorrect ? question.points : 0
      });
    }

    // Buscar o quiz real no banco de dados
    const quiz = await Quiz.findById(quizId);
    if (!quiz) {
      return res.status(404).json({
        success: false,
        message: 'Quiz n√£o encontrado'
      });
    }

    // Verificar se a quest√£o existe
    if (questionIndex < 0 || questionIndex >= quiz.questions.length) {
      return res.status(400).json({
        success: false,
        message: '√çndice de quest√£o inv√°lido'
      });
    }

    const question = quiz.questions[questionIndex];
    
    // Verificar se a op√ß√£o existe
    if (selectedAnswer < 0 || selectedAnswer >= question.options.length) {
      return res.status(400).json({
        success: false,
        message: 'Op√ß√£o inv√°lida'
      });
    }

    // Verificar se a resposta est√° correta
    const correctOptionIndex = question.options.findIndex(opt => opt.isCorrect === true);
    const isCorrect = selectedAnswer === correctOptionIndex;
    const selectedOption = question.options[selectedAnswer];
    const correctOption = question.options[correctOptionIndex];

    res.json({
      success: true,
      isCorrect,
      selectedAnswer: {
        index: selectedAnswer,
        text: selectedOption.label,
        isCorrect
      },
      correctAnswer: {
        index: correctOptionIndex,
        text: correctOption.label
      },
      explanation: selectedOption.explanation || correctOption.explanation || question.explanation || null,
      points: isCorrect ? question.points || 10 : 0
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Submeter quiz (p√∫blico para teste)
// @route   POST /api/quiz/:quizId/submit
// @access  Public
exports.submitQuiz = async (req, res, next) => {
  try {
    const { quizId } = req.params;
    const { answers, timeSpent } = req.body;

    // Validar entrada
    if (!answers || !Array.isArray(answers)) {
      return res.status(400).json({
        success: false,
        message: 'Respostas inv√°lidas'
      });
    }

    // Verificar se √© um desafio di√°rio mock
    if (quizId === 'daily-challenge-mock') {
      // Processar desafio di√°rio mock
      const totalQuestions = 2; // Quiz mock tem 2 quest√µes
      let score = 0;
      
      // Respostas corretas do quiz mock: √ìrg√£o (2), Si (3)
      const correctAnswers = [2, 3];
      
      for (let i = 0; i < answers.length && i < correctAnswers.length; i++) {
        if (answers[i] === correctAnswers[i]) {
          score++;
        }
      }

      const percentage = (score / totalQuestions) * 100;
      
      let feedback = '';
      if (percentage >= 90) {
        feedback = 'Excelente! Voc√™ demonstrou um conhecimento excepcional!';
      } else if (percentage >= 70) {
        feedback = 'Muito bom! Continue praticando para melhorar ainda mais!';
      } else if (percentage >= 50) {
        feedback = 'Bom trabalho! Revise o conte√∫do para melhorar seu desempenho.';
      } else {
        feedback = 'Continue estudando! A pr√°tica leva √† perfei√ß√£o.';
      }

      return res.json({
        success: true,
        score,
        total: totalQuestions,
        percentage: Math.round(percentage),
        feedback,
        timeSpent: timeSpent || 0,
        isDailyChallenge: true,
        message: 'Desafio di√°rio completado! Este √© um quiz de demonstra√ß√£o.'
      });
    }

    // Buscar o quiz real para corre√ß√£o
    const quiz = await Quiz.findById(quizId);
    if (!quiz) {
      return res.status(404).json({
        success: false,
        message: 'Quiz n√£o encontrado'
      });
    }

    // Calcular score real baseado nas respostas corretas do quiz
    const totalQuestions = quiz.questions.length;
    let score = 0;
    const correctAnswers = [];
    const userAnswers = [];
    
    // Processar cada resposta do usu√°rio (comparar por √≠ndice de op√ß√£o)
    for (let i = 0; i < answers.length && i < totalQuestions; i++) {
      const userAnswer = Number(answers[i]);
      const question = quiz.questions[i];
      
      if (question && question.options && question.options.length > 0) {
        // Encontrar a op√ß√£o correta para esta quest√£o
        const correctOptionIndex = question.options.findIndex(opt => opt.isCorrect === true);
        
        // Adicionar √†s listas para debug
        correctAnswers.push(correctOptionIndex);
        userAnswers.push(userAnswer);
        
        // Verificar se a resposta est√° correta (comparar √≠ndices)
        if (correctOptionIndex !== -1 && userAnswer === correctOptionIndex) {
          score++;
        }
      }
    }

    const percentage = totalQuestions > 0 ? Math.round((score / totalQuestions) * 100) : 0;
    
    // Debug: mostrar informa√ß√µes para desenvolvimento
    if (process.env.NODE_ENV === 'development') {
      console.log('üîç Debug Quiz Submission:');
      console.log('  Quiz ID:', quizId);
      console.log('  Total Questions:', totalQuestions);
      console.log('  User Answers:', userAnswers);
      console.log('  Correct Answers:', correctAnswers);
      console.log('  Score:', score);
      console.log('  Percentage:', percentage);
      console.log('  Questions:', quiz.questions.map((q, idx) => ({
        index: idx,
        question: q.question,
        options: q.options.map((opt, optIdx) => ({
          index: optIdx,
          label: opt.label,
          isCorrect: opt.isCorrect
        }))
      })));
    }

    // Gerar feedback baseado no desempenho
    let feedback = '';
    if (percentage >= 90) {
      feedback = 'Excelente! Voc√™ demonstrou um conhecimento excepcional!';
    } else if (percentage >= 70) {
      feedback = 'Muito bom! Continue praticando para melhorar ainda mais!';
    } else if (percentage >= 50) {
      feedback = 'Bom trabalho! Revise o conte√∫do para melhorar seu desempenho.';
    } else {
      feedback = 'Continue estudando! A pr√°tica leva √† perfei√ß√£o.';
    }

    // Preparar detalhes das respostas para o usu√°rio
    const answerDetails = quiz.questions.map((question, index) => {
      const userAnswer = userAnswers[index] !== undefined ? Number(userAnswers[index]) : -1;
      const isCorrect = userAnswer === Number(correctAnswers[index]);
      
      return {
        questionIndex: index,
        userAnswer: userAnswer !== -1 ? question.options[userAnswer]?.label : 'N√£o respondida',
        correctAnswer: question.options[Number(correctAnswers[index])] ?.label,
        isCorrect,
        explanation: question.explanation || 'Sem explica√ß√£o dispon√≠vel'
      };
    });

    res.json({
      success: true,
      score,
      total: totalQuestions,
      percentage: Math.round(percentage),
      feedback,
      timeSpent: timeSpent || 0,
      answerDetails,
      correctAnswers: correctAnswers,
      userAnswers: userAnswers
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Submeter quiz (vers√£o autenticada)
// @route   POST /api/quiz/:quizId/submit/private
// @access  Private
exports.submitQuizPrivate = async (req, res, next) => {
  try {
    const { quizId } = req.params;
    const { answers, timeSpent } = req.body;
    const userId = req.user.id;

    // Validar entrada
    if (!answers || !Array.isArray(answers)) {
      return res.status(400).json({
        success: false,
        message: 'Respostas inv√°lidas'
      });
    }

    // Buscar o quiz
    const quiz = await Quiz.findById(quizId);
    if (!quiz) {
      return res.status(404).json({
        success: false,
        message: 'Quiz n√£o encontrado'
      });
    }

    // Verificar se √© um desafio di√°rio
    const isDailyChallenge = quiz.type === 'daily-challenge';
    
    // Se for desafio di√°rio, verificar se j√° foi completado hoje
    if (isDailyChallenge) {
      const today = new Date();
      const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate());
      const todayEnd = new Date(todayStart.getTime() + 24 * 60 * 60 * 1000 - 1);
      
      const user = await User.findById(userId);
      const completedToday = user.completedQuizzes.some(cq => 
        cq.quizId.toString() === quizId &&
        new Date(cq.completedAt) >= todayStart &&
        new Date(cq.completedAt) <= todayEnd
      );

      if (completedToday) {
        return res.status(403).json({
          success: false,
          message: 'Voc√™ j√° completou o desafio de hoje! Volte amanh√£ para um novo desafio.',
          nextChallengeTime: new Date(todayStart.getTime() + 24 * 60 * 60 * 1000)
        });
      }
    }

    // Calcular score
    const totalQuestions = quiz.questions.length;
    let score = 0;
    const correctAnswers = [];
    const userAnswers = [];
    
    // Processar cada resposta do usu√°rio
    for (let i = 0; i < answers.length && i < totalQuestions; i++) {
      const userAnswer = answers[i];
      const question = quiz.questions[i];
      
      if (question && question.options && question.options.length > 0) {
        const correctOptionIndex = question.options.findIndex(opt => opt.isCorrect === true);
        
        // Adicionar √†s listas para debug
        correctAnswers.push(correctOptionIndex);
        userAnswers.push(userAnswer);
        
        // Verificar se a resposta est√° correta (comparar √≠ndices)
        if (correctOptionIndex !== -1 && userAnswer === correctOptionIndex) {
          score++;
        }
      }
    }

    const percentage = totalQuestions > 0 ? Math.round((score / totalQuestions) * 100) : 0;
    
    // Debug: mostrar informa√ß√µes para desenvolvimento
    if (process.env.NODE_ENV === 'development') {
      console.log('üîç Debug Quiz Private Submission:');
      console.log('  Quiz ID:', quizId);
      console.log('  Total Questions:', totalQuestions);
      console.log('  User Answers:', userAnswers);
      console.log('  Correct Answers:', correctAnswers);
      console.log('  Score:', score);
      console.log('  Percentage:', percentage);
    }

    // Gerar feedback
    let feedback = '';
    if (percentage >= 90) {
      feedback = 'Excelente! Voc√™ demonstrou um conhecimento excepcional!';
    } else if (percentage >= 70) {
      feedback = 'Muito bom! Continue praticando para melhorar ainda mais!';
    } else if (percentage >= 50) {
      feedback = 'Bom trabalho! Revise o conte√∫do para melhorar seu desempenho.';
    } else {
      feedback = 'Continue estudando! A pr√°tica leva √† perfei√ß√£o.';
    }

    // Salvar resultado no banco de dados
    const user = await User.findById(userId);
    
    // Adicionar quiz aos completados
    user.completedQuizzes.push({
      quizId: quizId,
      score: score,
      completedAt: new Date()
    });

    // Adicionar pontos baseados no desempenho
    const basePoints = quiz.points || 100;
    const pointsEarned = Math.round((score / totalQuestions) * basePoints);
    user.totalPoints += pointsEarned;

    // Se for desafio di√°rio, adicionar b√¥nus
    let bonusPoints = 0;
    if (isDailyChallenge) {
      bonusPoints = 50;
      user.totalPoints += bonusPoints;
    }

    await user.save();

    // Atualizar estat√≠sticas do quiz
    quiz.totalAttempts += 1;
    const newAverage = ((quiz.averageScore * (quiz.totalAttempts - 1)) + percentage) / quiz.totalAttempts;
    quiz.averageScore = Math.round(newAverage);
    await quiz.save();

    // Preparar detalhes das respostas
    const answerDetails = quiz.questions.map((question, index) => {
      const userAnswer = userAnswers[index] !== undefined ? userAnswers[index] : -1;
      const isCorrect = userAnswer === correctAnswers[index];
      
      return {
        questionIndex: index,
        userAnswer: userAnswer !== -1 ? question.options[userAnswer]?.label : 'N√£o respondida',
        correctAnswer: question.options[correctAnswers[index]]?.label,
        isCorrect,
        explanation: question.explanation || 'Sem explica√ß√£o dispon√≠vel'
      };
    });

    res.json({
      success: true,
      score,
      total: totalQuestions,
      percentage: Math.round(percentage),
      feedback,
      timeSpent: timeSpent || 0,
      answerDetails,
      correctAnswers: correctAnswers,
      userAnswers: userAnswers,
      pointsEarned: pointsEarned + bonusPoints,
      totalPoints: user.totalPoints,
      isDailyChallenge,
      bonusPoints,
      message: isDailyChallenge 
        ? 'Desafio di√°rio completado com sucesso! Volte amanh√£ para um novo desafio.'
        : 'Quiz completado com sucesso!'
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Obter hist√≥rico de quizzes
// @route   GET /api/quiz/history
// @access  Private
exports.getQuizHistory = async (req, res, next) => {
  try {
    const user = await User.findById(req.user.id)
      .populate({
        path: 'completedQuizzes.quizId',
        select: 'title moduleId',
        populate: {
          path: 'moduleId',
          select: 'title category'
        }
      });

    const history = user.completedQuizzes
      .filter(cq => cq.quizId) // Filtrar quizzes deletados
      .map(cq => ({
        quizTitle: cq.quizId.title,
        moduleTitle: cq.quizId.moduleId?.title,
        category: cq.quizId.moduleId?.category,
        score: cq.score,
        completedAt: cq.completedAt
      }))
      .sort((a, b) => b.completedAt - a.completedAt);

    res.json({
      success: true,
      count: history.length,
      history
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Obter quiz do dia (desafio di√°rio)
// @route   GET /api/quiz/daily-challenge
// @access  Public
exports.getDailyChallenge = async (req, res, next) => {
  try {
    console.log('üîç Buscando desafio di√°rio...');
    
    // Buscar um quiz de desafio di√°rio ativo
    const dailyQuiz = await Quiz.findOne({ 
      type: 'daily-challenge', 
      isActive: true 
    });
    
    if (!dailyQuiz) {
      console.log('‚ö†Ô∏è Nenhum quiz de desafio di√°rio encontrado. Criando quiz mock...');
      
      // Retornar quiz mock funcional (sem respostas corretas expostas)
      const mockChallenge = {
        id: 'daily-challenge-mock',
        title: 'Desafio Di√°rio - Demo',
        description: 'Complete o desafio musical do dia!',
        category: 'daily-challenge',
        questions: [
          {
            question: 'Quantas notas musicais existem no sistema ocidental?',
            options: [
              { id: 'A', label: '5 notas' },
              { id: 'B', label: '7 notas' },
              { id: 'C', label: '12 notas' },
              { id: 'D', label: '10 notas' }
            ],
            category: 'teoria-musical',
            difficulty: 'facil',
            points: 10
          },
          {
            question: 'Qual √© a nota que fica entre F√° e L√°?',
            options: [
              { id: 'A', label: 'Mi' },
              { id: 'B', label: 'Sol' },
              { id: 'C', label: 'Si' },
              { id: 'D', label: 'R√©' }
            ],
            category: 'teoria-musical',
            difficulty: 'facil',
            points: 10
          }
        ],
        timeLimit: 300,
        totalQuestions: 2,
        type: 'daily-challenge'
      };
      
      return res.json({
        success: true,
        quiz: mockChallenge
      });
    }

    console.log(`‚úÖ Quiz de desafio di√°rio encontrado: ${dailyQuiz.title}`);

    // Mapear quiz real removendo informa√ß√µes sens√≠veis
    const safeQuiz = {
      id: dailyQuiz._id,
      title: dailyQuiz.title,
      description: dailyQuiz.description,
      category: dailyQuiz.category || 'daily-challenge',
      questions: dailyQuiz.questions.map(q => ({
        question: q.question,
        options: q.options.map(opt => ({
          id: opt.id,
          label: opt.label
          // N√£o incluir isCorrect e explanation para manter seguran√ßa
        })),
        category: q.category,
        difficulty: q.difficulty,
        points: q.points
      })),
      timeLimit: dailyQuiz.timeLimit || 300,
      totalQuestions: dailyQuiz.questions.length,
      type: 'daily-challenge'
    };

    res.json({
      success: true,
      quiz: safeQuiz
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Obter quiz do dia (desafio di√°rio) - vers√£o autenticada
// @route   GET /api/quiz/daily-challenge/private
// @access  Private
exports.getDailyChallengePrivate = async (req, res, next) => {
  try {
    const user = await User.findById(req.user.id);
    
    // Simular quiz do dia baseado na data atual
    const today = new Date();
    const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    const todayEnd = new Date(todayStart.getTime() + 24 * 60 * 60 * 1000 - 1);
    
    // Buscar quizzes do n√≠vel do usu√°rio
    const availableQuizzes = await Quiz.find({ 
      level: user.level, 
      isActive: true 
    });

    if (availableQuizzes.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'Nenhum desafio dispon√≠vel para seu n√≠vel'
      });
    }

    // Selecionar quiz baseado no seed do dia
    const seed = today.getFullYear() * 10000 + (today.getMonth() + 1) * 100 + today.getDate();
    const quizIndex = seed % availableQuizzes.length;
    const dailyQuiz = availableQuizzes[quizIndex];

    // Verificar se j√° foi completado hoje
    const completedToday = user.completedQuizzes.some(cq => 
      cq.quizId.toString() === dailyQuiz._id.toString() &&
      new Date(cq.completedAt) >= todayStart &&
      new Date(cq.completedAt) <= todayEnd
    );

    if (completedToday) {
      return res.json({
        success: true,
        dailyChallenge: {
          available: false,
          quiz: null,
          message: 'Voc√™ j√° completou o desafio de hoje! Volte amanh√£ para um novo desafio.',
          nextChallengeTime: new Date(todayStart.getTime() + 24 * 60 * 60 * 1000),
          completedAt: user.completedQuizzes.find(cq => 
            cq.quizId.toString() === dailyQuiz._id.toString() &&
            new Date(cq.completedAt) >= todayStart &&
            new Date(cq.completedAt) <= todayEnd
          )?.completedAt,
          score: user.completedQuizzes.find(cq => 
            cq.quizId.toString() === dailyQuiz._id.toString() &&
            new Date(cq.completedAt) >= todayStart &&
            new Date(cq.completedAt) <= todayEnd
          )?.score
        }
      });
    }

    // Preparar quiz do dia
    const dailyChallengeQuiz = {
      _id: dailyQuiz._id,
      title: `Desafio do Dia: ${dailyQuiz.title}`,
      description: 'Complete o desafio di√°rio para ganhar pontos extras! Este desafio pode ser feito apenas uma vez por dia.',
      bonusPoints: 50,
      expiresAt: todayEnd,
      isDailyChallenge: true,
      type: 'daily-challenge',
      questions: dailyQuiz.questions.map(q => ({
        _id: q._id,
        question: q.question,
        options: q.options.map(opt => ({
          id: opt.id,
          label: opt.label
        })),
        category: q.category,
        difficulty: q.difficulty,
        points: q.points
      })),
      totalQuestions: dailyQuiz.questions.length,
      timeLimit: dailyQuiz.timeLimit || 600, // 10 minutos para desafio di√°rio
      level: dailyQuiz.level
    };

    res.json({
      success: true,
      dailyChallenge: {
        available: true,
        quiz: dailyChallengeQuiz,
        message: 'Novo desafio di√°rio dispon√≠vel! Complete-o para ganhar pontos extras.',
        expiresAt: todayEnd,
        isDailyChallenge: true,
        warning: '‚ö†Ô∏è ATEN√á√ÉO: Este desafio pode ser feito apenas uma vez por dia!'
      }
    });
  } catch (error) {
    next(error);
  }
};